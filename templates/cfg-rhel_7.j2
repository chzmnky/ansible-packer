# RHEL 7 base image kickstart file

install
cmdline
zerombr
clearpart --all --initlabel

{% set boot_parameters_full = console_boot_string + boot_parameters + ipv6_boot_string %}
{% if boot_pw_encrypted == '' %}
bootloader --timeout 1 --append "{{ boot_parameters_full }}"
{% else %}
bootloader --timeout 1 --append "{{ boot_parameters_full }}" --iscrypted --password {{ boot_pw_encrypted }}
{% endif %}

{% if partitioning is defined and partitioning == 'auto' %}
autopart
{% elif partitioning is defined and partitioning == 'single' %}
reqpart
part /     --fstype xfs --asprimary --size 1024 --grow
{% elif partitioning is defined and partitioning == 'custom' %}
{{ custom_partitioning }}
{% else %}
reqpart
part /boot --fstype xfs --asprimary --size 1024
part pv.01              --asprimary --size 1024 --grow
volgroup vg_rhel pv.01
logvol swap           --vgname vg_rhel --fstype swap --size 4096  --name lv_swap
logvol /              --vgname vg_rhel --fstype xfs  --size 6144  --name lv_root
logvol /home          --vgname vg_rhel --fstype xfs  --size 2048  --name lv_home
logvol /tmp           --vgname vg_rhel --fstype xfs  --size 2048  --name lv_tmp
logvol /var           --vgname vg_rhel --fstype xfs  --size 8192  --name lv_var
logvol /var/log       --vgname vg_rhel --fstype xfs  --size 2048  --name lv_var_log
logvol /var/log/audit --vgname vg_rhel --fstype xfs  --size 2048  --name lv_var_log_audit
logvol /var/tmp       --vgname vg_rhel --fstype xfs  --size 2048  --name lv_var_tmp
{% endif %}

selinux --{{ selinux }}
auth --useshadow --passalgo sha512
rootpw --iscrypted {{ root_pw_encrypted }}

{% if not disable_ipv6 | bool %}
network --bootproto dhcp --onboot yes --hostname {{ hostname }}
{% else %}
network --bootproto dhcp --onboot yes --hostname {{ hostname }} --noipv6
{% endif %}

firewall --enabled --service ssh
firstboot --disabled
lang en_US.UTF-8
timezone --ntpservers {{ ntp_servers }} --utc {{ timezone }}
keyboard {{ keyboard }}
services --enabled tuned
poweroff

{% if security_profile is defined %}
%addon org_fedora_oscap
content-type = scap-security-guide
profile = xccdf_org.ssgproject.content_profile_{{ security_profile }}
%end
{% endif %}

%packages
@Core
bash-completion
bzip2
chrony
#cloud-init
#cloud-utils-growpart
#insights-client
libselinux-python
man-pages
nano
openssh-clients
policycoreutils-python
psmisc
setools-console
#sos
tar
tuned
#unzip
vim-enhanced
virt-what
yum-utils

{% if security_profile is defined %}
aide
openscap
openscap-scanner
scap-security-guide
{% endif %}

{% if packer_builder == 'vmware' %}
# https://bugzilla.redhat.com/show_bug.cgi?id=2041424
perl-File-Temp
{% endif %}

-biosdevname
-btrfs-progs
-dracut-config-rescue
-*firmware*
-NetworkManager-team
-NetworkManager-tui
-parted
-plymouth
-rhc
-*rhn*
-sssd*

{% if custom_packages is defined %}
{{ custom_packages }}
{% endif %}
%end

%post --erroronfail
echo "blacklist floppy" > /etc/modprobe.d/blacklist-floppy.conf
sed -i -e 's,^AllowZoneDrifting=yes,AllowZoneDrifting=no,' /etc/firewalld/firewalld.conf
sed -i -e 's,^#UseDNS yes,UseDNS no,' /etc/ssh/sshd_config
sed -i -e '/cockpit/d' /etc/firewalld/zones/public.xml
rm -f /etc/firewalld/zones/public.xml.old
%end

{% if serial_console_setup | bool %}
%post --erroronfail
systemctl enable serial-getty@ttyS0.service
%end
{% endif %}

{% if disable_ipv6 | bool %}
%post --erroronfail
sed -i -e '/^::1/d' /etc/hosts
sed -i -e 's,^OPTIONS=",OPTIONS="-4 ,g' -e 's, ",",' /etc/sysconfig/chronyd
sed -i -e 's,^inet_protocols = all,inet_protocols = ipv4,' /etc/postfix/main.cf
sed -i -e 's,^IPv6_rpfilter=yes,IPv6_rpfilter=no,' /etc/firewalld/firewalld.conf
sed -i -e '/dhcpv6-client/d' /etc/firewalld/zones/public.xml
if [ -d /etc/vmware-tools ]; then
  echo "[guestinfo]" > /etc/vmware-tools/tools.conf
  echo "max-ipv6-routes=0" >> /etc/vmware-tools/tools.conf
fi
%end
{% endif %}

{% if root_ssh_key is defined %}
%post --erroronfail
mkdir -m 0700 /root/.ssh
echo "{{ root_ssh_key }}" > /root/.ssh/authorized_keys
chmod 0600 /root/.ssh/authorized_keys
restorecon -R /root/.ssh
%end
{% endif %}


%post --erroronfail
# Import Red Hat RPM GPG key
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release

# Update to latest packages
#curl -ksS ...
#yum -y update
#yum -y install katello-host-tools katello-host-tools-tracer
#subscription-manager unregister
#subscription-manager clean
#rm -f /etc/rhsm/syspurpose/syspurpose.json /var/lib/rhsm/cache/* \
#  /var/lib/rhsm/facts/*.json /var/lib/rhsm/repo*/*.repo /var/lib/rhsm/*_name

{% if create_admin | bool %}
# Create admin group and user
groupadd -g {{ admin_user.gid }} {{ admin_user.group }}
useradd -c "{{ admin_user.gecos }}" -d {{ admin_user.home }} -g {{ admin_user.gid }} -G {{ admin_user.groups }} -m -u {{ admin_user.uid }} {{ admin_user.name }}
{% if admin_user.ssh_key is defined %}
mkdir -m 0700 /home/{{ admin_user.name }}/.ssh
echo "{{ admin_user.ssh_key }}" > /home/{{ admin_user.name }}/.ssh/authorized_keys
chmod 0600 /home/{{ admin_user.name }}/.ssh/authorized_keys
chown -R 4444:4444 /home/{{ admin_user.name }}/.ssh
restorecon -R /home/{{ admin_user.name }}/.ssh
{% endif %}
{% if admin_user.passwordless_sudo is defined and admin_user.passwordless_sudo | bool %}
{% if admin_user.groups is not defined or 'wheel' not in admin_user.groups %}
usermod -a -G wheel {{ admin_user.name }}
{% endif %}
echo '%wheel ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/{{ admin_user.name }}
chmod 0440 /etc/sudoers.d/{{ admin_user.name }}
restorecon /etc/sudoers.d/{{ admin_user.name }}
{% endif %}

{% if not root_permit_local | bool %}
{% if root_permit_override_security_policy | bool %}
# Lock root account - caution needed
passwd -l root
{% endif %}
{% endif %}
{% endif %}

# Configure root SSH access
{% if security_policy is not defined or
  (security_policy is defined and root_permit_override_security_policy | bool) %}
sed -Ei -e 's,^(#|)PermitRootLogin .*,PermitRootLogin {{ root_permit_ssh }},' /etc/ssh/sshd_config
for sshd_conf in $(/bin/ls -1 /etc/ssh/sshd_config.d/*.conf 2>/dev/null); do
  sed -i -e 's,^PermitRootLogin .*,PermitRootLogin {{ root_permit_ssh }},' $sshd_conf
done
{% endif %}

# Services
systemctl disable remote-fs.target
systemctl disable systemd-readahead-collect.service systemd-readahead-drop.service systemd-readahead-replay.service
rpm -q NetworkManager > /dev/null 2>&1 || systemctl enable network.service

# Watchdog
sed -i -e 's,^#RuntimeWatchdogSec=0,RuntimeWatchdogSec=60s,' /etc/systemd/system.conf

# Remove machine identification and state
for netdev in $(nmcli -t dev | cut -d: -f1 | grep -v lo); do
  sed -i -e '/HWADDR=/d' /etc/sysconfig/network-scripts/ifcfg-$netdev
  sed -i -e '/UUID=/d' /etc/sysconfig/network-scripts/ifcfg-$netdev
done
truncate -s 0 /etc/machine-id /etc/resolv.conf
/bin/rm -rf /etc/systemd/network/7* /etc/udev/rules.d/7* /etc/ssh/ssh_host_*
/bin/rm -rf /var/lib/systemd/random-seed

# Clear caches, files, and logs
/bin/rm -rf /root/* /tmp/* /tmp/.[a-zA-Z]* /var/tmp/*
/bin/rm -rf /etc/*- /etc/*.bak /etc/*~ /etc/sysconfig/*~
/bin/rm -rf /var/cache/dnf/* /var/cache/yum/*
/bin/rm -rf /var/lib/dnf/* /var/lib/yum/repos/* /var/lib/yum/yumdb/*
/bin/rm -rf /var/lib/NetworkManager/* /var/lib/unbound/*.key
/bin/rm -rf /var/log/*debug /var/log/anaconda /var/log/dmesg*
/bin/rm -rf /var/log/grubby /var/log/grubby_prune_debug
/bin/rm -rf /var/lib/cloud/* /var/log/cloud-init*.log
truncate -s 0 /var/log/cron /var/log/rhsm/rhsmcertd.log /var/log/tuned/tuned.log
truncate -s 0 /var/log/audit/audit.log /var/log/messages /var/log/secure
truncate -s 0 /var/log/btmp /var/log/wtmp /var/log/lastlog

# Update initramfs
dracut -f --regenerate-all

{% if not kdump_update_disable | bool %}
# Create kdump initramfs for the newest kernel
kver_latest=$(rpm -q --qf "%{version}-%{release}.%{arch}\n" kernel | sort -V | tail -n 1)
sed -i -e "s,^KDUMP_KERNELVER=.*,KDUMP_KERNELVER=$kver_latest," /etc/sysconfig/kdump
kdumpctl rebuild
sed -i -e 's,^KDUMP_KERNELVER=.*,KDUMP_KERNELVER="",' /etc/sysconfig/kdump
{% endif %}

# Ensure everything is written to the disk
sync ; echo 3 > /proc/sys/vm/drop_caches ;
%end

{% if custom_section is defined %}
{{ custom_section }}
{% endif %}
